---
# ==============================
# Monitoring Server Playbook
# ==============================
- name: Setup Monitoring Server (Prometheus & Grafana)
  hosts: monitoring_servers
  gather_facts: true
  become: yes
  become_method: sudo
  vars:
    prometheus_port: 9090
    grafana_port: 3000
    monitoring_data_dir: /opt/monitoring
    grafana_admin_password: "{{ grafana_admin_password | default('grafanapassword') }}"
    prometheus_uid: 65534   # nobody user in Prometheus container
    prometheus_gid: 65534
    grafana_uid: 472        # Grafana container user
    grafana_gid: 472
    new_user: template

  tasks:
    - name: Ensure monitoring directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ new_user }}"
        group: "{{ new_user }}"
        mode: '0755'
      loop:
        - "{{ monitoring_data_dir }}/prometheus"
        - "{{ monitoring_data_dir }}/grafana"

    - name: Fix permissions for Prometheus and Grafana directories
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: directory
        owner: "{{ item.uid }}"
        group: "{{ item.gid }}"
        recurse: yes
        mode: '0755'
      loop:
        - { path: "{{ monitoring_data_dir }}/prometheus", uid: "{{ prometheus_uid }}", gid: "{{ prometheus_gid }}" }
        - { path: "{{ monitoring_data_dir }}/grafana", uid: "{{ grafana_uid }}", gid: "{{ grafana_gid }}" }

    # --- DOCKER IMAGES ---
    - name: Pull Prometheus and Grafana images
      community.docker.docker_image:
        name: "{{ item.name }}"
        tag: "{{ item.tag }}"
        source: pull
      loop:
        - { name: "prom/prometheus", tag: "v2.45.0" }
        - { name: "grafana/grafana", tag: "9.5.6" }

    # --- PROMETHEUS CONFIGURATION ---
    # Improved target building with debugging
    - name: Debug hostvars for target hosts (Pre-Build)
      ansible.builtin.debug:
        msg:
          - ">>> Building Targets for Host: {{ item }}"
          - "  - ansible_host (Inventory): '{{ hostvars[item].get('ansible_host', 'UNDEFINED') }}'"
          - "  - ansible_default_ipv4.address (Facts): '{{ hostvars[item].get('ansible_default_ipv4', {}).get('address', 'UNDEFINED_FACT') }}'"
      loop: "{{ groups['all_servers'] }}"
      tags: debug_targets

    # Robustly extract IP and build target list
    # Fix: Moved comment outside the set_fact value block to prevent Jinja2 syntax error
    - name: Build Prometheus node targets
      set_fact:
        # Use hostvars lookup directly and provide a clearer fallback chain
        prometheus_targets: >-
          {{
            groups['all_servers']
            | map('extract', hostvars) # Get hostvars dict for each host
            | map('dict2items') # Convert dict to list of {key, value} items
            | map('selectattr', 'key', 'eq', 'ansible_host') # Select the ansible_host item
            | map('map_attribute', 'value') # Extract the value (IP) from the selected item
            | select('defined') # Filter out undefined values
            | select('ne', '') # Filter out empty strings
            | map('regex_replace', '^(.+)$', '\1:9100') # Append :9100 port. \1 is the captured group.
            | list # Convert to list
          }}

    - name: Debug final Prometheus targets list
      ansible.builtin.debug:
        msg:
          - "Final Prometheus Targets List:"
          - "{{ prometheus_targets }}"
      tags: debug_targets

    - name: Fail if no valid targets found
      ansible.builtin.assert:
        that:
          - prometheus_targets | length > 0
        fail_msg: "No valid IP addresses found for Prometheus targets. Check host connectivity and facts."
      tags: debug_targets

    - name: Create Prometheus configuration
      ansible.builtin.copy:
        dest: "{{ monitoring_data_dir }}/prometheus/prometheus.yml"
        owner: "{{ prometheus_uid }}"
        group: "{{ prometheus_gid }}"
        mode: '0644'
        content: |
          global:
            scrape_interval: 15s

          scrape_configs:
            - job_name: 'prometheus'
              static_configs:
                - targets: ['localhost:9090']

            - job_name: 'node'
              static_configs:
                - targets:
                  {{ prometheus_targets | to_nice_yaml(indent=2) | indent(4) }}

    # --- CONTAINER DEPLOYMENT ---
    - name: Run Prometheus container
      community.docker.docker_container:
        name: prometheus
        image: prom/prometheus:v2.45.0
        state: started
        restart_policy: always
        ports:
          - "{{ prometheus_port }}:9090"
        volumes:
          - "{{ monitoring_data_dir }}/prometheus:/prometheus"
          - "{{ monitoring_data_dir }}/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
        command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus --web.enable-lifecycle"

    - name: Run Grafana container
      community.docker.docker_container:
        name: grafana
        image: grafana/grafana:9.5.6
        state: started
        restart_policy: always
        ports:
          - "{{ grafana_port }}:3000"
        env:
          GF_SECURITY_ADMIN_USER: admin
          GF_SECURITY_ADMIN_PASSWORD: "{{ grafana_admin_password }}"
          GF_USERS_ALLOW_SIGN_UP: "false"
        volumes:
          - "{{ monitoring_data_dir }}/grafana:/var/lib/grafana"

    # --- NETWORK SECURITY ---
    - name: Allow Prometheus, Grafana, and Node Exporter ports through firewall
      community.general.ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - "{{ prometheus_port }}" # 9090
        - "{{ grafana_port }}"    # 3000
        - "9100"                  # Node Exporter
      tags: firewall

    # --- POST-DEPLOYMENT ---
    - name: Wait for Prometheus to be ready
      ansible.builtin.uri:
        url: http://localhost:9090/-/ready
        method: GET
      register: prometheus_status
      until: prometheus_status.status == 200
      retries: 30
      delay: 5
      ignore_errors: yes


    - name: Display monitoring stack summary
      ansible.builtin.debug:
        msg:
          - "âœ… Monitoring stack deployed successfully!"
          - "Prometheus: http://{{ ansible_default_ipv4.address }}:{{ prometheus_port }}"
          - "Grafana: http://{{ ansible_default_ipv4.address }}:{{ grafana_port }}"
