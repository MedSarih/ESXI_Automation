---
# ==============================
# Main VM Configuration + Flask App Deployment
# ==============================
- name: Configure VM and deploy Flask app
  hosts: all
  gather_facts: yes
  become: yes
  become_method: sudo
  become_user: root
  serial: "{{ ansible_serial | default(3) }}"

  vars:
    new_user: "{{ ansible_ssh_user | default('template') }}"
    timezone: "Africa/Casablanca"
    project_name: "ESXI_Automation_at_Orange"
    flask_app_dir: /opt/flask_app

    # Use VM gateway as primary DNS + fallbacks
    upstream_dns_servers:
      - "{{ ansible_default_ipv4.gateway }}"
    fallback_dns_servers:
      - 1.1.1.1
      - 8.8.8.8

  pre_tasks:
    - name: Verify connectivity to target hosts
      ansible.builtin.ping:

    - name: Setup passwordless sudo for current user
      ansible.builtin.copy:
        content: |
          {{ new_user }} ALL=(ALL) NOPASSWD:ALL
        dest: "/etc/sudoers.d/{{ new_user }}"
        owner: root
        group: root
        mode: '0440'
        validate: 'visudo -cf %s'

    - name: Verify passwordless sudo works
      ansible.builtin.command: whoami
      become: yes
      changed_when: false
      register: sudo_test
      failed_when: sudo_test.stdout != 'root'

  tasks:
    # --- DNS CONFIGURATION ---
    - name: Ensure hostname resolves in /etc/hosts
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "127.0.1.1 {{ ansible_hostname }}"
        create: yes
        backup: yes

    - name: Write DNS servers directly into /etc/resolv.conf
      ansible.builtin.copy:
        dest: /etc/resolv.conf
        content: |
          nameserver {{ ansible_default_ipv4.gateway }}
          nameserver 1.1.1.1
          nameserver 8.8.8.8
        owner: root
        group: root
        mode: '0644'

    - name: Update package cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install essential packages
      ansible.builtin.apt:
        name:
          - vim
          - curl
          - git
          - htop
          - ufw
          - docker.io
          - docker-compose
          - python3-pip
        state: present
        install_recommends: no

    - name: Set system timezone
      community.general.timezone:
        name: "{{ timezone }}"

    - name: Create Docker daemon configuration directory
      ansible.builtin.file:
        path: /etc/docker
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Configure Docker DNS
      ansible.builtin.copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "dns": {{ (upstream_dns_servers + fallback_dns_servers) | to_json }},
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "10m",
              "max-file": "3"
            }
          }
        owner: root
        group: root
        mode: '0644'
      notify: Restart Docker

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ new_user }}"
        groups: docker
        append: yes

    - name: Configure UFW - Allow SSH
      community.general.ufw:
        rule: allow
        name: OpenSSH

    - name: Enable UFW firewall
      community.general.ufw:
        state: enabled
        policy: deny
        direction: incoming

    - name: Upgrade all packages
      ansible.builtin.apt:
        upgrade: dist
        autoremove: yes
        autoclean: yes

    # --- Flask App Deployment ---
    - name: Create Flask app directory
      ansible.builtin.file:
        path: "{{ flask_app_dir }}"
        state: directory
        owner: "{{ new_user }}"
        group: "{{ new_user }}"
        mode: '0755'

    - name: Create Flask app main file
      ansible.builtin.copy:
        dest: "{{ flask_app_dir }}/app.py"
        content: |
          from flask import Flask
          app = Flask(__name__)

          @app.route('/')
          def home():
              return "Project: {{ project_name }}"

          if __name__ == "__main__":
              app.run(host='0.0.0.0', port=5000)
        owner: "{{ new_user }}"
        group: "{{ new_user }}"
        mode: '0644'

    - name: Install Flask using pip
      ansible.builtin.pip:
        name: flask
        executable: pip3

    - name: Run Flask app in Docker container
      community.docker.docker_container:
        name: flask_app
        image: python:3.11-slim
        state: started
        restart_policy: always
        ports:
          - "5000:5000"
        command: >
          bash -c "pip install flask && python /app/app.py"
        volumes:
          - "{{ flask_app_dir }}:/app"

  handlers:
    - name: Restart Docker
      ansible.builtin.systemd:
        name: docker
        state: restarted
        enabled: yes
        daemon_reload: yes

  post_tasks:
    - name: Verify Docker is running
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: yes

    - name: Display summary
      ansible.builtin.debug:
        msg:
          - "✅ VM setup completed successfully!"
          - "✅ Flask app deployed and accessible on port 5000"
          - "Hostname: {{ ansible_hostname }}"
          - "IP Address: {{ ansible_default_ipv4.address | default('N/A') }}"
