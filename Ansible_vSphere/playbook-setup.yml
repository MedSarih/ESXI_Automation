---
# ==============================
# Main VM Configuration Playbook
# ==============================
- name: Configure all VMs (DNS, Users, System, Firewall, Docker DNS, Node Exporter)
  hosts: all
  gather_facts: yes
  become: yes
  become_method: sudo
  become_user: root
  serial: "{{ ansible_serial | default(3) }}"

  vars:
    new_user: "{{ ansible_ssh_user | default('template') }}"
    timezone: "Africa/Casablanca"

    # Use VM gateway as primary DNS + fallbacks
    upstream_dns_servers:
      - "{{ ansible_default_ipv4.gateway }}"
    fallback_dns_servers:
      - 1.1.1.1
      - 8.8.8.8

  pre_tasks:
    - name: Verify connectivity to target hosts
      ansible.builtin.ping:
      tags: always

    - name: Setup passwordless sudo for current user
      ansible.builtin.copy:
        content: |
          {{ new_user }} ALL=(ALL) NOPASSWD:ALL
        dest: "/etc/sudoers.d/{{ new_user }}"
        owner: root
        group: root
        mode: '0440'
        validate: 'visudo -cf %s'
      tags: ['always', 'sudo']

    - name: Verify passwordless sudo works
      ansible.builtin.command: whoami
      become: yes
      changed_when: false
      register: sudo_test
      failed_when: sudo_test.stdout != 'root'
      tags: ['always', 'sudo']

  tasks:
    # --- DNS CONFIGURATION ---
    - name: Ensure hostname resolves in /etc/hosts
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "127.0.1.1 {{ ansible_hostname }}"
        create: yes
        backup: yes
      tags: dns

    - name: Write DNS servers directly into /etc/resolv.conf
      ansible.builtin.copy:
        dest: /etc/resolv.conf
        content: |
          nameserver {{ ansible_default_ipv4.gateway }}
          nameserver 1.1.1.1
          nameserver 8.8.8.8
        owner: root
        group: root
        mode: '0644'
      tags: dns

    - name: Update package cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
      tags: packages

    - name: Install essential packages
      ansible.builtin.apt:
        name:
          - vim
          - curl
          - git
          - htop
          - ufw
          - docker.io
          - docker-compose
        state: present
        install_recommends: no
      tags: packages

    - name: Set system timezone
      community.general.timezone:
        name: "{{ timezone }}"
      tags: system

    - name: Create Docker daemon configuration directory
      ansible.builtin.file:
        path: /etc/docker
        state: directory
        owner: root
        group: root
        mode: '0755'
      tags: docker

    - name: Configure Docker DNS
      ansible.builtin.copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "dns": {{ (upstream_dns_servers + fallback_dns_servers) | to_json }},
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "10m",
              "max-file": "3"
            }
          }
        owner: root
        group: root
        mode: '0644'
      notify: Restart Docker
      tags: docker

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ new_user }}"
        groups: docker
        append: yes
      tags: docker

    - name: Configure UFW - Allow SSH
      community.general.ufw:
        rule: allow
        name: OpenSSH
      tags: firewall

    - name: Configure UFW - Allow monitoring ports
      community.general.ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - "3000"  # Grafana
        - "9090"  # Prometheus
        - "9093"  # Alertmanager
        - "9100"  # Node Exporter
      tags: firewall

    - name: Enable UFW firewall
      community.general.ufw:
        state: enabled
        policy: deny
        direction: incoming
      tags: firewall

    - name: Upgrade all packages
      ansible.builtin.apt:
        upgrade: dist
        autoremove: yes
        autoclean: yes
      tags: packages

    # --- NODE EXPORTER INSTALLATION ---
    - name: Download and install Node Exporter
      ansible.builtin.unarchive:
        src: https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz
        dest: /tmp
        remote_src: yes
      tags: monitoring

    - name: Move Node Exporter binary to /usr/local/bin
      ansible.builtin.copy:
        src: /tmp/node_exporter-1.6.1.linux-amd64/node_exporter
        dest: /usr/local/bin/node_exporter
        mode: '0755'
        remote_src: yes
      tags: monitoring

    - name: Create Node Exporter systemd service
      ansible.builtin.copy:
        content: |
          [Unit]
          Description=Node Exporter
          After=network.target

          [Service]
          User=root
          ExecStart=/usr/local/bin/node_exporter
          Restart=always

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/node_exporter.service
        owner: root
        group: root
        mode: '0644'
      tags: monitoring

    - name: Enable and start Node Exporter service
      ansible.builtin.systemd:
        name: node_exporter
        enabled: yes
        state: started
        daemon_reload: yes
      tags: monitoring

  handlers:
    - name: Restart Docker
      ansible.builtin.systemd:
        name: docker
        state: restarted
        enabled: yes
        daemon_reload: yes

  post_tasks:
    - name: Verify DNS resolution
      ansible.builtin.command: dig google.com
      changed_when: false
      tags: verify

    - name: Verify Docker is running
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: yes
      tags: verify

    - name: Verify Node Exporter is running
      ansible.builtin.uri:
        url: http://localhost:9100/metrics
        method: GET
      changed_when: false
      tags: verify

    - name: Display configuration summary
      ansible.builtin.debug:
        msg:
          - "âœ… Configuration completed successfully!"
          - "Hostname: {{ ansible_hostname }}"
          - "IP Address: {{ ansible_default_ipv4.address | default('N/A') }}"
          - "DNS Servers: {{ (upstream_dns_servers + fallback_dns_servers) | join(', ') }}"
          - "Docker Status: Running"
          - "Firewall: Enabled"
          - "Passwordless sudo: Configured"
          - "Node Exporter: Running on port 9100"
      tags: always