pipeline {
    agent any

    environment {
        TERRAFORM_DIR     = "Terraform_vSphere/root"
        ANSIBLE_DIR       = "Ansible_vSphere"
        ESXI_PASSWORD     = credentials('ESXI_PASSWORD')
        ANSIBLE_VM_CREDENTIALS = credentials('ANSIBLE_VM_CREDENTIALS')
        GRAFANA_PASS      = credentials('GRAFANA_ADMIN_PASSWORD')
    }


    triggers {
        githubPush()
    }
    
    
    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Validate Environment') {
            steps {
                sh '''
                    echo "=== Checking Tools ==="
                    which terraform || { echo "ERROR: terraform not found"; exit 1; }
                    terraform version
                    which ansible || { echo "ERROR: ansible not found"; exit 1; }
                    ansible --version
                    which jq || { echo "ERROR: jq not found"; exit 1; }
                    jq --version
                    which ovftool || { echo "ERROR: ovftool not found"; exit 1; }
                    ovftool --version
                '''
            }
        }

        stage('Terraform Init') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh '''
                        terraform plan \
                          -var="esxi_password=${ESXI_PASSWORD}" \
                          -out=tfplan
                    '''
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Export Terraform Output') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh '''
                        TF_CLI_ARGS="-no-color" terraform output -json > raw_output.json
                        jq . raw_output.json > terraform-output.json
                        mv terraform-output.json "${WORKSPACE}/${ANSIBLE_DIR}/"
                    '''
                }
            }
        }

        stage('Generate Ansible Inventory') {
            steps {
                sh '''
                    chmod +x "${WORKSPACE}/${ANSIBLE_DIR}/generated_inventory.sh"
                    "${WORKSPACE}/${ANSIBLE_DIR}/generated_inventory.sh"
                    cat "${WORKSPACE}/${ANSIBLE_DIR}/inventory.ini"
                '''
            }
        }

        stage('Ansible Base Setup') {
            steps {
                dir("${ANSIBLE_DIR}") {
                    withCredentials([
                        usernamePassword(credentialsId: 'ANSIBLE_VM_CREDENTIALS', usernameVariable: 'ANSIBLE_USER', passwordVariable: 'ANSIBLE_PASS')
                    ]) {
                        sh '''
                            # Simplified Ansible environment variables
                            export ANSIBLE_HOST_KEY_CHECKING=False
                            export ANSIBLE_BECOME_TIMEOUT=60
                            export ANSIBLE_TIMEOUT=60
                            export ANSIBLE_BECOME_METHOD=sudo
                            export ANSIBLE_BECOME_FLAGS=""

                            # Run the base configuration playbook
                            ansible-playbook -i inventory.ini playbook-setup.yml \\
                              --extra-vars "ansible_ssh_user=${ANSIBLE_USER} ansible_ssh_pass=${ANSIBLE_PASS}" \\
                              --ssh-common-args="-o ControlMaster=no -o ConnectTimeout=30" \\
                              -vvv
                        '''
                    }
                }
            }
        }

        stage('Ansible Monitoring Stack') {
            steps {
                dir("${ANSIBLE_DIR}") {
                    withCredentials([
                        usernamePassword(credentialsId: 'ANSIBLE_VM_CREDENTIALS', usernameVariable: 'ANSIBLE_USER', passwordVariable: 'ANSIBLE_PASS'),
                        string(credentialsId: 'GRAFANA_ADMIN_PASSWORD', variable: 'GRAFANA_PASS')
                    ]) {
                        sh '''
                            # Simplified Ansible environment variables
                            export ANSIBLE_HOST_KEY_CHECKING=False
                            export ANSIBLE_BECOME_TIMEOUT=60
                            export ANSIBLE_TIMEOUT=60
                            export ANSIBLE_BECOME_METHOD=sudo
                            export ANSIBLE_BECOME_FLAGS=""

                            # Run the monitoring stack playbook
                            ansible-playbook -i inventory.ini playbook-monitoring.yml \\
                              --extra-vars "ansible_ssh_user=${ANSIBLE_USER} ansible_ssh_pass=${ANSIBLE_PASS} grafana_admin_password=${GRAFANA_PASS}" \\
                              --ssh-common-args="-o ControlMaster=no -o ConnectTimeout=30" \\
                              -vvv
                        '''
                    }
                }
            }
        }
    }


    post {
        success {
            echo '‚úÖ Deployment successful!'
            echo 'üéâ VMs are set up and ready!'
            echo 'üìä Prometheus: http://192.168.8.240:9090/'
            echo 'üìà Grafana: http://192.168.8.240:3000/'
            echo 'üíª app-vMachine: ssh template@191.168.8.230'
            echo 'üíª monitoring-vMachine: ssh template@192.168.8.240'
            echo 'üîç Node Exporter Metrics: http://192.168.8.240:9100/metrics'
        }
        failure {
            echo '‚ùå Deployment failed!'
        }
        always {
            cleanWs()
        }
    }
}