pipeline {
    agent any

    environment {
        TERRAFORM_DIR     = "Terraform_vSphere/root" // Relative path from workspace root
        ANSIBLE_DIR       = "Ansible_vSphere"        // Relative path from workspace root

        //Credentials from Jenkins
        ESXI_PASSWORD     = credentials('ESXI_PASSWORD')
        ANSIBLE_VM_CREDENTIALS = credentials('ANSIBLE_VM_CREDENTIALS')
        GRAFANA_PASS      = credentials('GRAFANA_ADMIN_PASSWORD')
    }

    triggers {
        githubPush()
    }

    stages {
        stage('Checkout Code') {
            steps {
                // This clones the repository based on Jenkins job SCM settings
                checkout scm
            }
        }

        stage('Validate Environment') {
            steps {
                sh '''
                    echo "=== Checking Tools ==="
                    which terraform || { echo "ERROR: terraform not found in PATH"; exit 1; }
                    terraform version

                    which ansible || { echo "ERROR: ansible not found in PATH"; exit 1; }
                    ansible --version

                    which jq || { echo "ERROR: jq not found in PATH"; exit 1; }
                    jq --version

                    which ovftool || { echo "ERROR: ovftool not found in PATH"; exit 1; }
                    ovftool --version

                    echo "=== Checking Directories and Files ==="
                    if [ ! -d "${TERRAFORM_DIR}" ]; then
                        echo "ERROR: Terraform directory ${TERRAFORM_DIR} not found!"
                        ls -la . || true
                        exit 1
                    fi

                    if [ ! -d "${ANSIBLE_DIR}" ]; then
                        echo "ERROR: Ansible directory ${ANSIBLE_DIR} not found!"
                        ls -la . || true
                        exit 1
                    fi

                    if [ ! -f "${ANSIBLE_DIR}/generated_inventory.sh" ]; then
                        echo "ERROR: Inventory script ${ANSIBLE_DIR}/generated_inventory.sh not found!"
                        ls -la ${ANSIBLE_DIR} || true
                        exit 1
                    fi

                    echo "All checks passed."
                '''
            }
        }

        stage('Init Terraform') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh 'terraform init'
                }
            }
        }

        stage('Plan Terraform') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh '''
                        terraform plan \
                          -var="esxi_password=${ESXI_PASSWORD}" \
                          -out=tfplan
                    '''
                }
            }
        }

        stage('Apply Terraform') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Export Terraform Output') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    // Export JSON output to the Ansible directory for the inventory script
                    sh "terraform output -json > \${WORKSPACE}/${ANSIBLE_DIR}/terraform-output.json"
                    // Debug: Show the output file was created
                    sh "ls -l \${WORKSPACE}/${ANSIBLE_DIR}/terraform-output.json"
                }
            }
        }

        stage('Generate Ansible Inventory') {
            steps {
                 // Ensure we are in the right directory context or use absolute path
                 // Using absolute path based on WORKSPACE for clarity and correctness
                 sh '''
                     chmod +x "${WORKSPACE}/${ANSIBLE_DIR}/generated_inventory.sh"
                     "${WORKSPACE}/${ANSIBLE_DIR}/generated_inventory.sh"
                 '''
                 // Debug: Display the generated inventory
                 sh 'cat ${WORKSPACE}/${ANSIBLE_DIR}/inventory.ini'
            }
        }

        stage('Ansible Base Setup') {
            steps {
                dir("${ANSIBLE_DIR}") { 
                    // Use credentials helper to pass username/password securely
                    withCredentials([usernamePassword(credentialsId: 'ANSIBLE_VM_CREDENTIALS', usernameVariable: 'ANSIBLE_USER', passwordVariable: 'ANSIBLE_PASS')]) {
                        sh '''
                            export ANSIBLE_HOST_KEY_CHECKING=False
                            # Use --extra-vars to pass the password from Jenkins credentials
                            ansible-playbook \
                                -i inventory.ini \
                                playbook-setup.yml \
                                --extra-vars "ansible_ssh_pass=${ANSIBLE_PASS}"
                        '''
                    }
                }
            }
        }

        stage('Ansible Monitoring Stack') {
            steps {
                dir("${ANSIBLE_DIR}") { 
                    // Use credentials helper for VM access and Grafana password
                    withCredentials([
                        usernamePassword(credentialsId: 'ANSIBLE_VM_CREDENTIALS', usernameVariable: 'ANSIBLE_USER', passwordVariable: 'ANSIBLE_PASS'),
                        string(credentialsId: 'GRAFANA_ADMIN_PASSWORD', variable: 'GRAFANA_PASS')
                    ]) {
                        sh '''
                            export ANSIBLE_HOST_KEY_CHECKING=False
                            ansible-playbook \
                                -i inventory.ini \
                                playbook-monitoring.yml \
                                --extra-vars "ansible_ssh_pass=${ANSIBLE_PASS} grafana_admin_password=${GRAFANA_PASS}"
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo '✅ Deployment successful!'
        }
        failure {
            echo '❌ Deployment failed!'
        }
        unstable {
             echo '⚠️ Deployment is unstable (e.g., tests failed).'
        }
        // Always clean up the workspace
        always {
            cleanWs()
        }
        
    }
}