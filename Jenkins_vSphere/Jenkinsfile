pipeline {
    agent any

    environment {
        TERRAFORM_DIR     = "Terraform_vSphere/root"
        ANSIBLE_DIR       = "Ansible_vSphere"
        ESXI_PASSWORD     = credentials('ESXI_PASSWORD')
        ANSIBLE_VM_CREDENTIALS = credentials('ANSIBLE_VM_CREDENTIALS')
        GRAFANA_PASS      = credentials('GRAFANA_ADMIN_PASSWORD')
    }

    triggers {
        githubPush()
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Validate Environment') {
            steps {
                sh '''
                    echo "=== Checking Tools ==="
                    which terraform || { echo "ERROR: terraform not found"; exit 1; }
                    terraform version
                    which ansible || { echo "ERROR: ansible not found"; exit 1; }
                    ansible --version
                    which jq || { echo "ERROR: jq not found"; exit 1; }
                    jq --version
                    which ovftool || { echo "ERROR: ovftool not found"; exit 1; }
                    ovftool --version
                '''
            }
        }

        stage('Init Terraform') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh 'terraform init'
                }
            }
        }

        stage('Plan Terraform') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh '''
                        terraform plan \
                          -var="esxi_password=${ESXI_PASSWORD}" \
                          -out=tfplan
                    '''
                }
            }
        }

        stage('Apply Terraform') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Export Terraform Output') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh '''
                        TF_CLI_ARGS="-no-color" terraform output -json > raw_output.json
                        jq . raw_output.json > terraform-output.json
                        mv terraform-output.json "${WORKSPACE}/${ANSIBLE_DIR}/"
                    '''
                }
            }
        }

        stage('Generate Ansible Inventory') {
            steps {
                sh '''
                    chmod +x "${WORKSPACE}/${ANSIBLE_DIR}/generated_inventory.sh"
                    "${WORKSPACE}/${ANSIBLE_DIR}/generated_inventory.sh"
                    cat "${WORKSPACE}/${ANSIBLE_DIR}/inventory.ini"
                '''
            }
        }

        // --- Critical Fix Applied in Ansible Stages ---
        stage('Ansible Base Setup') {
            steps {
                dir("${ANSIBLE_DIR}") {
                    withCredentials([
                        usernamePassword(credentialsId: 'ANSIBLE_VM_CREDENTIALS', usernameVariable: 'ANSIBLE_USER', passwordVariable: 'ANSIBLE_PASS')
                    ]) {
                        sh '''
                            # Set core Ansible environment variables for stability and correct become behavior
                            export ANSIBLE_HOST_KEY_CHECKING=False
                            export ANSIBLE_BECOME_TIMEOUT=30
                            export ANSIBLE_TIMEOUT=30
                            # Explicitly define become flags to prevent TTY issues (key fix)
                            export ANSIBLE_BECOME_FLAGS="-H -S -n"

                            # Run the base configuration playbook with specific overrides
                            ansible-playbook -i inventory.ini playbook-setup.yml \\
                              --extra-vars "ansible_ssh_user=${ANSIBLE_USER} ansible_ssh_pass=${ANSIBLE_PASS}" \\
                              -e 'ansible_ssh_common_args="-o ControlMaster=no"' \\
                              -e 'ansible_become_method=sudo' \\
                              -e 'ansible_become_exe=sudo -n' \\
                              -vvv
                        '''
                    }
                }
            }
        }

        stage('Ansible Monitoring Stack') {
            steps {
                dir("${ANSIBLE_DIR}") {
                    withCredentials([
                        usernamePassword(credentialsId: 'ANSIBLE_VM_CREDENTIALS', usernameVariable: 'ANSIBLE_USER', passwordVariable: 'ANSIBLE_PASS'),
                        string(credentialsId: 'GRAFANA_ADMIN_PASSWORD', variable: 'GRAFANA_PASS')
                    ]) {
                        sh '''
                            # Set core Ansible environment variables for stability and correct become behavior
                            export ANSIBLE_HOST_KEY_CHECKING=False
                            export ANSIBLE_BECOME_TIMEOUT=30
                            export ANSIBLE_TIMEOUT=30
                            # Explicitly define become flags to prevent TTY issues (key fix)
                            export ANSIBLE_BECOME_FLAGS="-H -S -n"

                            # Run the monitoring stack playbook with specific overrides
                            ansible-playbook -i inventory.ini playbook-monitoring.yml \\
                              --extra-vars "ansible_ssh_user=${ANSIBLE_USER} ansible_ssh_pass=${ANSIBLE_PASS} grafana_admin_password=${GRAFANA_PASS}" \\
                              -e 'ansible_ssh_common_args="-o ControlMaster=no"' \\
                              -e 'ansible_become_method=sudo' \\
                              -e 'ansible_become_exe=sudo -n' \\
                              -vvv
                        '''
                    }
                }
            }
        }
        // --- End of Critical Fixes ---
    }

    post {
        success {
            echo '✅ Deployment successful!'
        }
        failure {
            echo '❌ Deployment failed!'
            // Consider adding more detailed failure reporting here if needed
            // e.g., archive logs, send notifications
        }
        always {
            cleanWs() // Clean up the workspace after the run
        }
    }
}