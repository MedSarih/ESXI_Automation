pipeline {
    agent any

    environment {
        // Project root
        PROJECT_DIR       = '/mnt/hgfs'
        
        // Subdirectories
        TERRAFORM_DIR     = '${PROJECT_DIR}/Terraform_vSphere/root'
        ANSIBLE_DIR       = '${PROJECT_DIR}/Ansible_vSphere'
        INVENTORY_FILE    = '${ANSIBLE_DIR}/inventory.ini'
        INVENTORY_SCRIPT  = '${ANSIBLE_DIR}/generated_inventory.sh'
        TF_OUTPUT_JSON    = '${ANSIBLE_DIR}/terraform-output.json'

        // Jenkins credentials (set in Jenkins UI)
        ESXI_PASSWORD     = credentials('ESXI_PASSWORD')
        ANSIBLE_USER_PASS = credentials('ANSIBLE_VM_CREDENTIALS')  // 'template' user + password
        GRAFANA_PASS      = credentials('GRAFANA_ADMIN_PASSWORD')
    }

    triggers {
        // Trigger on GitHub push
        githubPush()
    }

    stages {
        stage('Clone Code from GitHub') {
            steps {
                checkout scm
            }
        }

        stage('Init Terraform') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh 'terraform init'
                }
            }
        }

        stage('Plan Terraform') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh '''
                        terraform plan \
                          -var="esxi_password=${ESXI_PASSWORD}" \
                          -out=tfplan
                    '''
                }
            }
        }

        stage('Apply Terraform') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Export Terraform Output to JSON') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh 'terraform output -json > ${TF_OUTPUT_JSON}'
                }
            }
        }

        stage('Generate Ansible Inventory') {
            steps {
                sh '''
                    chmod +x ${INVENTORY_SCRIPT}
                    ${INVENTORY_SCRIPT}
                '''
                sh 'cat ${INVENTORY_FILE}'  // Debug: show generated inventory
            }
        }

        stage('Run Ansible: Base Setup') {
            steps {
                dir("${ANSIBLE_DIR}") {
                    withCredentials([
                        usernamePassword(credentialsId: 'ANSIBLE_VM_CREDENTIALS',
                                         usernameVariable: 'ANSIBLE_USER',
                                         passwordVariable: 'ANSIBLE_PASS')
                    ]) {
                        sh '''
                            export ANSIBLE_HOST_KEY_CHECKING=False
                            ansible-playbook \
                                -i inventory.ini \
                                playbook-setup.yml \
                                --extra-vars "ansible_ssh_pass=${ANSIBLE_PASS}"
                        '''
                    }
                }
            }
        }

        stage('Run Ansible: Monitoring Stack') {
            steps {
                dir("${ANSIBLE_DIR}") {
                    withCredentials([
                        usernamePassword(credentialsId: 'ANSIBLE_VM_CREDENTIALS',
                                         usernameVariable: 'ANSIBLE_USER',
                                         passwordVariable: 'ANSIBLE_PASS'),
                        string(credentialsId: 'GRAFANA_ADMIN_PASSWORD', variable: 'GRAFANA_PASS')
                    ]) {
                        sh '''
                            export ANSIBLE_HOST_KEY_CHECKING=False
                            ansible-playbook \
                                -i inventory.ini \
                                playbook-monitoring.yml \
                                --extra-vars "ansible_ssh_pass=${ANSIBLE_PASS} grafana_admin_password=${GRAFANA_PASS}"
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo '✅ Pipeline completed successfully!'
            script {
                sh '''
                    echo "Deployment successful!" | mail -s "Jenkins CI/CD Success" admin@company.com || true
                '''
            }
        }
        failure {
            echo '❌ Pipeline failed!'
            script {
                sh '''
                    echo "Pipeline failed at stage: ${STAGE_NAME}" | mail -s "Jenkins CI/CD Failure" admin@company.com || true
                '''
            }
        }
        always {
            cleanWs()
        }
    }
}