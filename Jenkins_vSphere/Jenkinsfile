pipeline {
    agent any
    
    environment {
        ESXI_HOST = "172.20.10.51"
        ESXI_USERNAME = "root"
        ESXI_PASSWORD = credentials('ESXI_PASSWORD')
        ANSIBLE_VM_HOST = "172.20.10.135"
        ANSIBLE_VM_USER = "template"
        GRAFANA_ADMIN_PASSWORD = credentials('GRAFANA_ADMIN_PASSWORD')
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/MedSarih/ESXI_Automation.git'
            }
        }
        
        stage('Terraform Operations') {
            steps {
                withCredentials([string(credentialsId: 'ESXI_PASSWORD', variable: 'TF_VAR_esxi_password')]) {
                    bat '''
                        "C:\\Program Files\\Git\\bin\\sh.exe" -c "
                            cd Terraform_vSphere
                            echo '=== Initializing Terraform ==='
                            /c/ProgramData/chocolatey/bin/terraform init || /c/Program\\ Files/Terraform/terraform.exe init || terraform init
                            echo '=== Validating Terraform ==='
                            /c/ProgramData/chocolatey/bin/terraform validate || /c/Program\\ Files/Terraform/terraform.exe validate || terraform validate
                        "
                    '''
                    
                    // Separate plan and apply to avoid complex escaping
                    bat '''
                        "C:\\Program Files\\Git\\bin\\sh.exe" -c "
                            cd Terraform_vSphere
                            echo '=== Planning Terraform ==='
                            /c/ProgramData/chocolatey/bin/terraform plan -var=\\\"esxi_hostname=$ESXI_HOST\\\" -var=\\\"esxi_username=$ESXI_USERNAME\\\" -var=\\\"esxi_password=%TF_VAR_esxi_password%\\\" -out=tfplan || /c/Program\\\\ Files/Terraform/terraform.exe plan -var=\\\"esxi_hostname=$ESXI_HOST\\\" -var=\\\"esxi_username=$ESXI_USERNAME\\\" -var=\\\"esxi_password=%TF_VAR_esxi_password%\\\" -out=tfplan || terraform plan -var=\\\"esxi_hostname=$ESXI_HOST\\\" -var=\\\"esxi_username=$ESXI_USERNAME\\\" -var=\\\"esxi_password=%TF_VAR_esxi_password%\\\" -out=tfplan
                        "
                    '''
                    
                    bat '''
                        "C:\\Program Files\\Git\\bin\\sh.exe" -c "
                            cd Terraform_vSphere
                            echo '=== Applying Terraform ==='
                            /c/ProgramData/chocolatey/bin/terraform apply -auto-approve tfplan || /c/Program\\\\ Files/Terraform/terraform.exe apply -auto-approve tfplan || terraform apply -auto-approve tfplan
                        "
                    '''
                }
            }
        }
        
        stage('Generate Inventory') {
            steps {
                bat '''
                    "C:\\Program Files\\Git\\bin\\sh.exe" -c "
                        cd Terraform_vSphere
                        echo '=== Generating Terraform Output ==='
                        /c/ProgramData/chocolatey/bin/terraform output -json vm_inventory > ../Ansible_vSphere/terraform-output.json || /c/Program\\\\ Files/Terraform/terraform.exe output -json vm_inventory > ../Ansible_vSphere/terraform-output.json || terraform output -json vm_inventory > ../Ansible_vSphere/terraform-output.json
                        
                        cd ../Ansible_vSphere
                        echo '=== Generating Ansible Inventory ==='
                        chmod +x generated_inventory.sh
                        ./generated_inventory.sh
                        echo '=== Inventory Generated Successfully ==='
                        cat inventory.ini
                    "
                '''
            }
            post {
                success {
                    archiveArtifacts artifacts: 'Ansible_vSphere/inventory.ini,Ansible_vSphere/terraform-output.json'
                }
            }
        }
        
        stage('Deploy Ansible Playbooks') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'ANSIBLE_VM_CREDENTIALS', usernameVariable: 'ANSIBLE_USER', passwordVariable: 'ANSIBLE_PASS'),
                    string(credentialsId: 'GRAFANA_ADMIN_PASSWORD', variable: 'GRAFANA_PASS')
                ]) {
                    bat '''
                        "C:\\Program Files\\Git\\bin\\sh.exe" -c "
                            echo '=== Copying Files to Ansible VM ==='
                            scp -o StrictHostKeyChecking=no -r Ansible_vSphere/* %ANSIBLE_USER%@%ANSIBLE_VM_HOST%:/tmp/ansible/
                            
                            echo '=== Executing Ansible Playbooks ==='
                            ssh -o StrictHostKeyChecking=no %ANSIBLE_USER%@%ANSIBLE_VM_HOST% \"
                                mkdir -p ~/ansible_playbooks
                                cp -r /tmp/ansible/* ~/ansible_playbooks/
                                cd ~/ansible_playbooks
                                
                                echo '=== Running Basic Setup ==='
                                ansible-playbook -i inventory.ini playbook-setup.yml
                                
                                echo '=== Running Monitoring Setup ==='
                                ansible-playbook -i inventory.ini playbook-monitor.yml -e grafana_admin_password=%GRAFANA_PASS%
                            \"
                        "
                    '''
                }
            }
        }
    }
    
    post {
        success {
            echo '‚úÖ Deployment Complete!'
            echo "üìä Access your monitoring dashboards after they're deployed"
        }
        failure {
            echo '‚ùå Deployment Failed! Check the logs above for details'
        }
        always {
            cleanWs()
        }
    }
}