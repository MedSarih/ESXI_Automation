pipeline {
    agent any

    environment {
        // ESXi Connection Details
        ESXI_HOST = "172.20.10.51"
        ESXI_USERNAME = "root"

        // Ansible VM Connection Details
        ANSIBLE_VM_HOST = "172.20.10.135"
        ANSIBLE_VM_USER = "template"

        // Full Terraform path
        TERRAFORM_PATH = "C:\\Program Files\\Terraform\\terraform.exe"

        // Full Git Bash path
        GIT_BASH_PATH = "C:\\Program Files\\Git\\bin\\bash.exe"
    }

    options {
        skipDefaultCheckout true
    }

    stages {

        stage('Checkout') {
            steps {
                cleanWs()
                echo "üì• Checking out code from SCM..."
                checkout scm
            }
        }

        stage('Check Terraform Files') {
            steps {
                script {
                    def tfDir = "${env.WORKSPACE}\\Terraform_vSphere"
                    def tfFiles = new File(tfDir).listFiles().findAll { it.name.endsWith('.tf') }
                    if (!tfFiles) {
                        error "‚ùå No Terraform (.tf) files found in ${tfDir}! Pipeline stopped."
                    } else {
                        echo "‚úÖ Terraform files found: ${tfFiles*.name}"
                    }
                }
            }
        }

        stage('Terraform Operations') {
            steps {
                withCredentials([string(credentialsId: 'ESXI_PASSWORD', variable: 'TF_VAR_esxi_password')]) {
                    bat """
                        echo === Navigating to Terraform Directory ===
                        cd Terraform_vSphere

                        echo === Initializing Terraform ===
                        \"${env.TERRAFORM_PATH}\" init

                        echo === Validating Terraform Configuration ===
                        \"${env.TERRAFORM_PATH}\" validate

                        echo === Planning Terraform Changes ===
                        \"${env.TERRAFORM_PATH}\" plan ^
                          -var="esxi_hostname=%ESXI_HOST%" ^
                          -var="esxi_username=%ESXI_USERNAME%" ^
                          -var="esxi_password=%TF_VAR_esxi_password%"

                        echo === Applying Terraform Changes ===
                        \"${env.TERRAFORM_PATH}\" apply -auto-approve ^
                          -var="esxi_hostname=%ESXI_HOST%" ^
                          -var="esxi_username=%ESXI_USERNAME%" ^
                          -var="esxi_password=%TF_VAR_esxi_password%"
                    """
                }
            }
        }

        stage('Generate Ansible Inventory') {
            steps {
                sh """
                    set -e
                    echo '=== Generating Terraform Output JSON ==='
                    cd Terraform_vSphere
                    '${env.TERRAFORM_PATH}' output -json vm_inventory > ../Ansible_vSphere/terraform-output.json

                    echo '=== Running Inventory Generation Script ==='
                    cd ../Ansible_vSphere
                    chmod +x generated_inventory.sh
                    ./generated_inventory.sh

                    echo '=== Displaying Generated Inventory ==='
                    if [ -f inventory.ini ]; then
                        cat inventory.ini
                    else
                        echo 'ERROR: inventory.ini was not generated.'
                        exit 1
                    fi
                """
            }
            post {
                success {
                    archiveArtifacts artifacts: 'Ansible_vSphere/inventory.ini,Ansible_vSphere/terraform-output.json', allowEmptyArchive: false
                }
            }
        }

        stage('Deploy Ansible Playbooks') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'ANSIBLE_VM_CREDENTIALS', usernameVariable: 'ANSIBLE_USER', passwordVariable: 'ANSIBLE_PASS'),
                    string(credentialsId: 'GRAFANA_ADMIN_PASSWORD', variable: 'GRAFANA_PASS')
                ]) {
                    sh """
                        set -e
                        echo '=== Copying Ansible Files to Ansible VM ==='
                        scp -o StrictHostKeyChecking=no -r Ansible_vSphere/* ${ANSIBLE_USER}@${ANSIBLE_VM_HOST}:/tmp/ansible/

                        echo '=== Executing Ansible Playbooks on Ansible VM ==='
                        ssh -o StrictHostKeyChecking=no ${ANSIBLE_USER}@${ANSIBLE_VM_HOST} \\"
                            set -e
                            echo '--- Setting up on Ansible VM ---'
                            mkdir -p ~/ansible_playbooks
                            cp -r /tmp/ansible/* ~/ansible_playbooks/
                            cd ~/ansible_playbooks

                            echo '--- Running Basic Setup Playbook ---'
                            ansible-playbook -i inventory.ini playbook-setup.yml

                            echo '--- Running Monitoring Setup Playbook ---'
                            ansible-playbook -i inventory.ini playbook-monitor.yml -e grafana_admin_password=\\\$${GRAFANA_PASS}
                        \\"
                    """
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Deployment Pipeline Completed Successfully!'
            echo "üìä Next steps:"
            echo "   1. Access Prometheus: http://<MONITORING_VM_IP>:9090"
            echo "   2. Access Grafana:   http://<MONITORING_VM_IP>:3000"
            echo "   3. Grafana login: admin / <your_grafana_password>"
        }
        failure {
            echo '‚ùå Deployment Pipeline Failed!'
            echo "üîé Please check the logs above to find the cause."
        }
        always {
            cleanWs()
        }
    }
}